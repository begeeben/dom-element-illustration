// @function bounce-position($distance, $percentage, $bounce-factor, $bounce-count:5)

@mixin bounce-out($attr, $start, $end, $bounce-factor: 0.5, $bounce-count: 5)
	$f: $bounce-factor

	// when bounce count is infinite
	$t-all: 1 + 2 / (1 - sqrt($f))

	$t: 1

	$p: 100 / $t-all

	$p-prev: 0

	$d: $end - $start

	$c: 0

	$position: 0

	0%
		#{$attr}: #{$start}px

	// from 1% to 100%
	@for $i from 1 to 100
		@if $p - $p-prev > 1
			// when the current bounce cycle time > 1/100

			@if $i > $p
				// when current time > the direction reversed time (either starting to fall or bounce back)

				@if $c % 2 == 0
					// if starting to fall
					#{$p}%
						#{$attr}: #{$end}px

					$d: $d * $f
					$c: $c + 1
					$t: $t * sqrt($f)
					$p-prev: $p
					$p: $p + 100 * $t / $t-all
				@else
					// if starting to bounce back
					#{$p}%
						#{$attr}: #{$end - $d}px
					$c: $c + 1
					$p-prev: $p
					$p: $p + 100 * $t / $t-all

				// @if $p < $i
					// @debug $c

			@if $c % 2 == 0
				// if starting to fall
				#{$i}%
					#{$attr}: #{$end - $d + $d * ($i - $p-prev) * ($i - $p-prev) / (($p - $p-prev) * ($p - $p-prev))}px
			@else
				// if starting to bounce back
				#{$i}%
					#{$attr}: #{$end - $d + $d * ($p - $i) * ($p - $i) / (($p - $p-prev) * ($p - $p-prev))}px

		@else
			// when the current bounce cylce time < 1/100, no need to calculate positions
			#{$i}%
				#{$attr}: #{$end}px

	100%
		#{$attr}: #{$end}px


@keyframes bounce-out
	@include bounce-out(top, -500, 0) 
